正则表达式

    动机:
        1.文本处理已经成为计算机的常见工作之一
        2.对文本内容的搜索,定位,提取是逻辑比较复杂的工作
        3.为了快速方便的解决上述问题,产生了正则表达式

    定义:即文本的高级匹配模式,提供搜索替换等功能,其本质是一系列有字符和特殊符号组成的字符串,这个字符串即正则表达式

    匹配原理: 由普通的字符和特殊符号构成,通过描述字符的重复,位置,种类等行为达到匹配某一类字符串的目的

    正则特点:
        *方便处理文本
        *支持语言众多
        *使用灵活多样
    
    目标:
        1.熟练掌握正则表达式符号
        2.读懂简单的正则表达式,编写简单的正则表达式
        3.能够使用python  re 操作正则表达式
    
    python --->re模块
    
        re.findall(pattern,string)
        功能:使用正则表达式匹配字符串
        参数:pattern  正则表达式
            string   目标字符串
        返回值: 返回匹配内容列表

In [4]: import re

In [5]: s = "百度:https://www.baidu.com"

In [6]: pattern = "((http|https)://(\s+\.){2}\w+)"

In [7]: re.findall("https://.+",s)
Out[7]: ['https://www.baidu.com']

In [8]: s = "Tom,Come on"

In [9]: re.findall("[A-Z]\w*",s)
Out[9]: ['Tom', 'Come']


元字符的使用

1.普通字符
    元字符: a B c
    匹配规则:每个字符匹配对应的自身字符

2. 或

元字符: | (空格也是字符)
    匹配规则:匹配|俩边任意一个正则表达式

3.匹配单个字符
    元字符: .
    匹配规则:匹配除换行外任意一个字符

    In [15]: re.findall("f.o","foo fao")
    Out[15]: ['foo', 'fao']

4.匹配字符串开始位置
元字符: ^
匹配规则:匹配目标字符串的开始位置
In [17]: re.findall("^Jame","Jame is a boy")
Out[17]: ['Jame']

5.匹配字符串的结束位置
元字符:$
匹配规则:匹配目标字符串的结束位置
In [20]: re.findall("Jame$","hi Jame")
Out[20]: ['Jame']



6.匹配重复

元字符:*
匹配规则:匹配前面的字符出现0次或多次
In [21]: re.findall("fo*","foooooooooabcdeffo")
Out[21]: ['fooooooooo', 'f', 'fo'] ## o出现0次或多次

7.匹配重复

元字符:  +
匹配规则:匹配前面的字符出现1次或多次

In [22]: re.findall("A.+","A")
Out[22]: []  ##A 后最少有一个字符

8.匹配重复
元字符: ?
匹配规则:匹配前面的字符出现0次或1次

9.匹配重复
 元字符:{n}
 匹配规则:匹配前面的字符重复指定的次数

fo{3} --->fooo
In [26]: re.findall("fo{3}","foooooooooooooooooabcdeffo")
Out[26]: ['fooo']

10.匹配重复

元字符:{m,n}
匹配规则:匹配前面的字符出现 m---n次
In [27]: re.findall("fo{2,4}","foooooooooooooooooabcdeffoo")
Out[27]: ['foooo', 'foo']

11.匹配字符集

元字符:[字符集]
匹配规则:匹配字符集中任意一个字符
[abc123] -->a b c  1  2 3
[a-z]  [A-Z] [0-9]
[$#_a-zA-z]

In [30]: re.findall("[A-Z][a-z]*","Hi,This is Lua")
Out[30]: ['Hi', 'This', 'Lua']


In [31]: re.findall("[A-Z][-_a-z]*","Hi,This is ")
Out[31]: ['Hi', 'This']

In [32]: re.findall("[A-Z][-_a-z]*","Hi,This is a_b")
Out[32]: ['Hi', 'This']


In [34]: re.findall("[A-Z][-_a-z]*","Hi,This is Aa_b ")
Out[34]: ['Hi', 'This', 'Aa_b']


12.匹配字符集
元字符:[^...]
匹配规则:匹配除指定字符外的任意一个字符

[^abc] ---除a b c 外的所有字符

In [46]: re.findall("[^ ]+","This is Aa_b")
Out[46]: ['This', 'is', 'Aa_b']

13.匹配任意(非)数字字符

元字符: \d   \D
匹配规则:\d 匹配任意一个数字字符  [0-9]
        \D  匹配任意一个非数字字符 [^0-9]   +代表重复一个或多次

In [52]: re.findall("\d+","2018年就快过去了,2019马上到来")
Out[52]: ['2018', '2019']

In [53]: re.findall("\d{5}","num123456")
Out[53]: ['12345']

In [54]: re.findall("\D+","2018年就快过去了,2019马上到来")
Out[54]: ['年就快过去了,', '马上到来']

14.匹配任意(非)普通字符

元字符: \w   \W
匹配规则: \w  匹配普通字符(数字字母下划线,utf8字符))
         \W  匹配特殊字符

In [56]: re.findall("\w+","safGFG_132沙发是的发生")
Out[56]: ['safGFG_132沙发是的发生']

In [57]: re.findall("\W+","!@#@#$%^&%&*(")
Out[57]: ['!@#@#$%^&%&*(']

15.匹配任意(非)空字符
元字符:\s  \S
匹配规则: \s 匹配任意空字符  [ \r\n\t\v\f]
        \S 匹配任意非空字符 

In [66]: re.findall("\w+\s+\w+","hello              word")
Out[66]: ['hello              word']

In [67]: re.findall("^\S+","Hello-123#$%H xxxxxxx")
Out[67]: ['Hello-123#$%H']

16.匹配字符串开头结尾位置

元字符: \A \Z 
匹配规则:\A 匹配字符串开头位置
        \Z 匹配字符串结尾位置
绝对匹配(完全匹配):保证正则表达式匹配目标字符串的全部内容
In [70]: re.findall("\A\d+-\d+\Z","1000-150000")
Out[70]: ['1000-150000']

In [71]: re.findall("^\d+-\d+$","1000-150000")
Out[71]: ['1000-150000']

17. 匹配(非)单词边界

元字符: \b  \B
匹配规则: \b 匹配单词边界 (普通字符和其他字符的交界)
        \B 匹配非单词边界

"Tom is a boy"
 | | || ||

In [75]: re.findall(r"\bis\b","This is a boy")
Out[75]: ['is']

In [76]: re.findall(r"\Bis","This is a boy")
Out[76]: ['is']


元字符总结

匹配单个字符 . [...] [^...] \d \D \w \W \s \S

匹配重复  * + {n} {m,n}

匹配位置 ^ $ \A \Z \b \B

其他: | () \

正则表达式的转义
    正则特殊符号: .  *  + ?  ^ $ () [] | \ 

    正则表达式如果匹配特殊字本身符,则需要加\ 
    eg. 匹配字符 . 用 \.

    目标字符串      正则表达式         字符串
      $10           \$\d+         "\\$\\d+"

    raw字串:对字符串不进行转义解析
        r"\$\d+" ==> "\\$\\d+"


贪婪和非贪婪

贪婪模式:正则表达式的重复匹配默认总是尽可能多的向后匹配内容
        * + ? {m,n}

非贪婪(懒惰)模式: 尽可能少的匹配内容
    贪婪--->非贪婪  *? +? ?? {m,n}?

正则表达式分组:
    使用 () 可以为正则表达式内部建立分组,通过分组构建正则表达式的内部整理处理部分
        re.search(r"(ab)+","abababababababababab").group()
           "abababababababababab"
    *子组是正则表达式的一部分,子组需要再整体能够匹配内容的前提下发回作用

子组的作用:
    1.作为一个内部整体,改变某些元字符的操作对象
    In [7]: re.search(r"\w+@\w+\.(com|cn)","abc@123456.com").group()
    Out[7]: 'abc@123456.com'


    2.在匹配到内容的前提下,子组对应内容可以单独提取
    In [10]: re.search(r"(http|https|ftp)://\S+","https://www.baidu.com").group()
    Out[10]: 'https://www.baidu.com'

    #单独提取
    In [13]: re.search(r"(http|https|ftp)://\S+","https://www.baidu.com").group(1)
    Out[13]: 'https'

捕获组和非捕获组
捕获组:被命名的子组
格式:(?P<名字>pattern)
作用:名字可以表达一定的含义,也可以通过名字来提取子组对应内容
In [17]: re.search(r"(?P<big>[A-Z])\w*","Hello word").group("big")
Out[17]: 'H'

*一个正则表达式可以有多个子组,多个子组尽量不要重叠或者过多嵌套,通常由外到内,从左到右分为第一第二子组

((ab)cd)(ef)

正则表达式的设计原则:
    1.正确性:能够正确的匹配目标字符串
    2.排他性:除了要匹配的内容,尽可能不会匹配到其他多余内容
    3.全面性:尽可能将目标字符串的全部情况考虑全面,不遗漏

In [27]: re.search(r"\d{17}(\d|x)","41272219970317081x").group()
Out[27]: '41272219970317081x'

re模块 

regex = compile(pattern,flags = 0)
功能: 生成正则表达式对象
参数:pattern 正则表达式
    flags 功能标识,用来丰富正则表达式功能
返回值:返回一个正则表达式对象


re.findall(pattern,string,flags)
功能:使用正则表达式匹配目标字符串
参数:pattern 正则表达式
    string 目标字符串
    flags 标志位
返回值:列表,匹配到的内容
      如果正则表达式有子组则只获取子组对应内容
      有子组只显示子组

regex.findall(string,pos,endpos)
功能:使用正则表达式匹配目标字符串
参数:string 目标字符串
    pos 匹配目标的起始位置
    endpos 匹配目标的结束位置
返回值:列表,匹配到的内容
      如果正则表达式有子组则只获取子组对应内容

re.split(pattern,string,flags)
功能:使用正则匹配到的部分切割目标字符串
参数:pattern 正则
    string 目标字串
    flags 标志位
返回值:返回列表,为切割后内容

re.sub(pattern,replaceStr,string,max,flags)
功能:使用字符串替换匹配到的内容
参数:replaceStr 替换字符串
    max 最多替换后的字符串 默认全部替换
返回值:返回替换后的字符串

subn()
功能参数同sub
返回值:返回替换后的字符串和替换数量

re.finditer(pattern,string,flags)
功能:使用正则表达式匹配目标字符串
参数:pattern 正则
    string 目标字串
    flags 标志位
返回值:返回一个包含匹配内容的迭代对象

re.fullmatch(pattern,string,flags)
功能:匹配全部字串
参数: pattern 正则
     string  目标字串
     flags   标志位
返回值: match 对象

re.match(pattern,string,flags)
功能:匹配一个目标字符串开始位置
参数: pattern 正则
     string  目标字串
     flags   标志位
返回值: match 对象


search(pattern,string,flags)
功能:匹配一个目标字符串第一次匹配内容
参数: pattern 正则
     string  目标字串
     flags   标志位
返回值: match 对象


compile对象属性变量

pattern:正则表达式

flags:标志位值

groupindex:查看捕获组名和对应序列号的字典

groups:子组数量



match对象的属性和函数
属性
pos
endpos
re
string
lastgroup
lastindex


方法
start()
end()
span()

group(n)
功能:获取match对象的对应内容
参数:默认为0表示获取match对象所有对应内容
    如果为>0整数则表示某个子组对应内容
    如果为子组名称则表示对应捕获组匹配内容
返回值:返回对应字符串

groupdict()
功能:获取捕获组和对应值的字典


groups()
功能:获取所有子组对应内容
